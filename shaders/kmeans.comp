#version 430 core
#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require

#define SIZE 256
#define CLUSTERS 4

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D normals;
uniform ivec2 u_texSize;

struct Cluster {
	vec3 cntr;
	uint size;
};

coherent restrict layout(std430, binding = 0) buffer destBuffer {
	Cluster clusters[CLUSTERS];
	bool moving;
};

coherent restrict layout(std430, binding = 1) buffer idxBuffer {
	uint indices[];
};

void main() {

	const ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	const vec2 coords = vec2(pos.x / float(u_texSize.x), pos.y / float(u_texSize.y));
	const vec3 N = texture2D(normals, coords).rgb;
	const bool isNormal = length(N) != 0;

	const uint id = pos.y * (gl_WorkGroupSize.x + gl_NumWorkGroups.x) + pos.x;

	float myDot = -1;

	if(id == 0) {
		moving = false;
	}

	if(isNormal) {
		for(int k = 0; k < CLUSTERS; ++k) {
			memoryBarrier();
			float d = dot(N, clusters[k].cntr);
			if(d > myDot) {
				myDot = d;
				indices[id] = k;
				moving = true;
			}
		}
	}
}